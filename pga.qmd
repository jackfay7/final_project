---
title: "PGA"
format: html
---

```{r}
library(tidyverse)
library(shiny)
library(plotly)
library(shinythemes)



pga_full <- read_csv("data/PGA2022.csv")
variable_choices <- names(pga_full)[4:10]

ui <- fluidPage(
  theme = shinytheme("flatly"),
  sidebarLayout(
    sidebarPanel(
      selectInput("country_choice", label = "Country Filter",
                  choices = c("All", unique(pga_full$country)), selected = "All"),
      selectInput(inputId = "player_choice", label = "Choose player(s)",
                  choices = NULL, selected = NULL, multiple = TRUE)
    ),
    mainPanel(
      tabsetPanel(
        tabPanel("Line Graph", plotlyOutput(outputId = "line_graph"),
                 selectInput("yvar", label = "Choose a Variable", choices = variable_choices, selected = "avgScore"),
                 tableOutput(outputId = "summary_table1")),
        tabPanel("Bar Graph", plotlyOutput(outputId = "bar_graph"),
                 selectInput("tournament_choice", label = "Tournament Filter",
                  choices = unique(pga_full$tournament), selected = "All"),
                 tableOutput(outputId = "summary_table2"))
    )
  )
)
)


server <- function(input, output, session) {
  
observeEvent(input$country_choice, {
  player_choices <- pga_full|> distinct(playerName) |> pull(playerName)
  
 if (input$country_choice != "All") {
  player_choices <- pga_full |> filter(country == input$country_choice) |> distinct(playerName) |> pull(playerName)
 }else{
   player_choices <- pga_full|> distinct(playerName) |> pull(playerName)
 }
  updateSelectInput(inputId = "player_choice",
                    choices = sort(player_choices))
})

 
  pga_line_react <- reactive({
    pga_full |> filter(playerName %in% input$player_choice) 
  })
  
   pga_bar_react <- reactive({
    pga_full|>
   filter(playerName %in% input$player_choice, tournament == input$tournament_choice)|>
   pivot_longer(cols = 4:10, names_to = "stat", values_to = "value")
   })
  
  
  output$line_graph <- renderPlotly({
     req(input$player_choice)
    plot1 <- ggplot(data = pga_line_react(),
           aes(x = tournament, y = .data[[input$yvar]], color = playerName, label = Points)) +
      geom_point()+
      geom_line( tooltip = "label") +
      labs(title = "Player Comparison")
    
    ggplotly(plot1, tooltip = "label")
  })
  
   output$bar_graph <- renderPlotly({
     req(input$player_choice, input$tournament_choice)
     plot2 <- ggplot(pga_bar_react(), 
       aes(x = stat, y = value, group = playerName, fill = playerName, label = value))+
  geom_col(position = "dodge", color = "black")+
      labs(x = "Statistics", y = input$tournament_choice)
      
 ggplotly(plot2, tooltip = "label")

   })
   
   
  output$summary_table1 <- renderTable({
      pga_full |>
        filter(playerName %in% input$player_choice) |>
        group_by(playerName)|>
        summarise(points = mean(Points, na.rm = T), 
                  money = mean(Money, na.rm = T),
                  avgScore = mean(avgScore, na.rm = T),
                  puttsSG = mean(puttsSG, na.rm = T),
                  driveSG = mean(driveSG, na.rm = T),
                  onePuttPct = mean(onePuttPct, na.rm = T),
                  avgPuttsPerRound = mean(avgPuttsPerRound, na.rm = T),
                  drivePct = mean(drivePct, na.rm = T),
                  avgDriveDist = mean(avgDriveDist, na.rm = T))
     
    })
  output$summary_table2 <- renderTable({
     pga_full |>
        filter(playerName %in% input$player_choice, tournament == input$tournament_choice) |>
        group_by(playerName)|>
        summarise(points = mean(Points, na.rm = T), 
                  money = mean(Money, na.rm = T),
                  avgScore = mean(avgScore, na.rm = T),
                  puttsSG = mean(puttsSG, na.rm = T),
                  driveSG = mean(driveSG, na.rm = T),
                  onePuttPct = mean(onePuttPct, na.rm = T),
                  avgPuttsPerRound = mean(avgPuttsPerRound, na.rm = T),
                  drivePct = mean(drivePct, na.rm = T),
                  avgDriveDist = mean(avgDriveDist, na.rm = T))
    })
}

shinyApp(ui, server)
```



```{r}
library(tidyverse)
library(shiny)
library(plotly)
library(shinythemes)

pga_full <- read_csv("data/PGA2022.csv")
variable_choices <- names(pga_full)[4:10]

ui <- fluidPage(
  theme = shinytheme("flatly"),
  sidebarLayout(
    sidebarPanel(
      selectInput(inputId = "player_choice", label = "Choose player(s)",
                  choices = unique(pga_full$playerName), selected = "Scottie Scheffler", multiple = TRUE)
    ),
    mainPanel(
      tabsetPanel(
        tabPanel("Line Graph", plotlyOutput(outputId = "line_graph"),
                 selectInput("yvar", label = "Choose a Variable", choices = variable_choices, selected = "avgScore"))
    )
  )
)
)

server <- function(input, output, session) {
  pga_line_react <- reactive({
    pga_full |> filter(playerName %in% input$player_choice) 
  })
  

  
  output$line_graph <- renderPlotly({
     req(input$player_choice)
    plot1 <- ggplot(data = pga_line_react(),
           aes(x = factor(tournament), y = .data[[input$yvar]], color = playerName, label = Points)) +
      geom_point()+
      labs(title = "Player Comparison")
    
    ggplotly(plot1, tooltip = "label")
  })
  
}

shinyApp(ui, server)
```
```{r}
data <- pga_full |> filter(playerName %in% "Scottie Scheffler") 

plot1 <- ggplot(data = data,
           aes(x = factor(tournament), y = avgScore, color = playerName, label = Points)) +
      geom_point()+
  geom_line()+
      labs(title = "Player Comparison")
    
    ggplotly(plot1, tooltip = "label")

```

